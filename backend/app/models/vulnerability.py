from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey, Float, JSON, Date
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.core.database import Base


class CVE(Base):
    """Common Vulnerabilities and Exposures (CVE) data"""
    __tablename__ = "cves"
    
    id = Column(Integer, primary_key=True, index=True)
    cve_id = Column(String(20), unique=True, index=True, nullable=False)  # CVE-2023-1234
    
    # CVE details
    description = Column(Text)
    cvss_score = Column(Float)
    cvss_vector = Column(String(100))
    severity = Column(String(20))  # low, medium, high, critical
    
    # Affected products
    affected_products = Column(JSON)  # List of affected software/products
    vendor = Column(String(255))
    
    # Dates
    published_date = Column(Date)
    last_modified_date = Column(Date)
    
    # References
    references = Column(JSON)
    cwe_id = Column(String(20))
    
    # Raw data
    raw_data = Column(JSON)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    vulnerabilities = relationship("Vulnerability", back_populates="cve")
    
    def __repr__(self):
        return f"<CVE(id={self.id}, cve_id='{self.cve_id}', severity='{self.severity}')>"


class Vulnerability(Base):
    """Vulnerability instances for specific assets"""
    __tablename__ = "vulnerabilities"
    
    id = Column(Integer, primary_key=True, index=True)
    cve_id = Column(Integer, ForeignKey("cves.id"))
    asset_id = Column(Integer, ForeignKey("assets.id"))
    
    # Vulnerability status
    status = Column(String(50), default="open")  # open, in_progress, resolved, false_positive
    priority = Column(String(20), default="medium")  # low, medium, high, critical
    
    # Risk assessment
    risk_score = Column(Float, default=0.0)
    exploitability = Column(String(20))  # none, low, medium, high
    impact = Column(String(20))  # none, low, medium, high
    
    # Detection
    detection_method = Column(String(100))  # scanner, manual, automated
    detected_by = Column(String(255))
    detection_date = Column(DateTime(timezone=True))
    
    # Remediation
    remediation_plan = Column(Text)
    remediation_priority = Column(String(20))
    estimated_effort = Column(String(50))  # low, medium, high
    
    # Verification
    verified = Column(Boolean, default=False)
    verification_date = Column(DateTime(timezone=True))
    verified_by = Column(String(255))
    
    # Notes and metadata
    notes = Column(Text)
    tags = Column(JSON)
    custom_fields = Column(JSON)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    resolved_at = Column(DateTime(timezone=True))
    
    # Relationships
    cve = relationship("CVE", back_populates="vulnerabilities")
    asset = relationship("Asset", back_populates="vulnerabilities")
    
    def __repr__(self):
        return f"<Vulnerability(id={self.id}, cve_id={self.cve_id}, asset_id={self.asset_id}, status='{self.status}')>" 