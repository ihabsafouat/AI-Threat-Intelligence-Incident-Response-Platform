version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: threat_intel_db
    environment:
      POSTGRES_DB: threat_intel
      POSTGRES_USER: threat_user
      POSTGRES_PASSWORD: threat_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - threat_intel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U threat_user -d threat_intel"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: threat_intel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - threat_intel_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow PostgreSQL (for Airflow metadata)
  airflow-postgres:
    image: postgres:15-alpine
    container_name: airflow_postgres
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    networks:
      - threat_intel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: airflow_webserver
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'your-secret-key-change-in-production'
      AIRFLOW__CORE__DEFAULT_TIMEZONE: 'UTC'
      AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
      # AWS Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_REGION:-us-east-1}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./backend:/opt/airflow/backend
      - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - threat_intel_network
    restart: unless-stopped

  # Apache Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow_scheduler
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'your-secret-key-change-in-production'
      AIRFLOW__CORE__DEFAULT_TIMEZONE: 'UTC'
      AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
      # AWS Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_REGION:-us-east-1}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./backend:/opt/airflow/backend
      - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
    command: scheduler
    networks:
      - threat_intel_network
    restart: unless-stopped

  # Apache Airflow Init (one-time setup)
  airflow-init:
    image: apache/airflow:2.7.1
    container_name: airflow_init
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'your-secret-key-change-in-production'
      AIRFLOW__CORE__DEFAULT_TIMEZONE: 'UTC'
      AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
      # AWS Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_REGION:-us-east-1}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./backend:/opt/airflow/backend
      - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
    command: version
    networks:
      - threat_intel_network
    profiles:
      - init

  # Backend API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.api
    container_name: threat_intel_api
    environment:
      - DATABASE_URL=postgresql://threat_user:threat_password@postgres:5432/threat_intel
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
      - DEBUG=true
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - threat_intel_network
    restart: unless-stopped

  # Ingestion Service
  ingestion:
    build:
      context: ./backend
      dockerfile: Dockerfile.ingestion
    container_name: threat_intel_ingestion
    environment:
      - DATABASE_URL=postgresql://threat_user:threat_password@postgres:5432/threat_intel
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DEBUG=true
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET}
    ports:
      - "8001:8001"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp_data:/app/temp_data
      - ./processed_data:/app/processed_data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - threat_intel_network
    restart: unless-stopped

  # Frontend Dashboard (Development)
  dashboard-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.development
    container_name: threat_intel_dashboard_dev
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - threat_intel_network
    restart: unless-stopped

  # Frontend Dashboard (Production)
  dashboard-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: threat_intel_dashboard_prod
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3001:3000"
    depends_on:
      - api
    networks:
      - threat_intel_network
    restart: unless-stopped
    profiles:
      - production

  # Celery Worker (for background tasks)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: threat_intel_celery_worker
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://threat_user:threat_password@postgres:5432/threat_intel
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp_data:/app/temp_data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - threat_intel_network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: threat_intel_celery_beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://threat_user:threat_password@postgres:5432/threat_intel
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp_data:/app/temp_data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - threat_intel_network
    restart: unless-stopped

  # Nginx (for production)
  nginx:
    image: nginx:alpine
    container_name: threat_intel_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - dashboard-prod
    networks:
      - threat_intel_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  airflow_postgres_data:

networks:
  threat_intel_network:
    driver: bridge 